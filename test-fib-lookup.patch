diff --git a/include/net/ip_fib.h b/include/net/ip_fib.h
index 69c91d1..a9f14ba 100644
--- a/include/net/ip_fib.h
+++ b/include/net/ip_fib.h
@@ -25,6 +25,7 @@
 #include <linux/percpu.h>
 #include <linux/notifier.h>
 #include <linux/refcount.h>
+#include <linux/inet.h>
 
 struct fib_config {
 	u8			fc_dst_len;
@@ -259,26 +260,423 @@ static inline struct fib_table *fib_new_table(struct net *net, u32 id)
 	return fib_get_table(net, id);
 }
 
-static inline int fib_lookup(struct net *net, const struct flowi4 *flp,
-			     struct fib_result *res, unsigned int flags)
-{
-	struct fib_table *tb;
-	int err = -ENETUNREACH;
+#ifdef __i386__
+#  define RDTSC_DIRTY "%eax", "%ebx", "%ecx", "%edx"
+#elif __x86_64__
+#  define RDTSC_DIRTY "%rax", "%rbx", "%rcx", "%rdx"
+#else
+# error unknown platform
+#endif
 
-	rcu_read_lock();
+static u32 global_ip = 0;
 
+static inline int fib_lookup(struct net *net, struct flowi4 *flp,
+ 			     struct fib_result *res, unsigned int flags)
+ {
+ 	struct fib_table *tb;
+ 	int err = -ENETUNREACH;
+ 
+	static const char * const wtf_26[] = {
+		"1.11.8.173",
+		"1.22.229.12",
+		"1.45.169.125",
+		"1.65.197.30",
+		"1.240.4.85",
+		"1.176.220.116",
+		"1.177.136.19",
+		"1.177.171.40",
+		"1.22.243.78",
+		"1.23.236.70",
+		"1.186.77.25",
+		"1.45.34.87",
+		"2.92.43.229",
+		"2.93.39.69",
+		"2.16.40.38",
+		"8.8.200.239",
+		"8.18.46.215",
+		"8.24.237.210",
+		"2.20.17.221",
+		"12.5.59.16",
+		"12.27.187.190",
+		"12.28.71.153",
+		"12.66.72.54",
+		"12.111.165.26",
+		"12.150.213.3",
+		"12.151.79.144",
+		"12.156.6.107",
+		"12.196.167.182",
+		"12.164.67.242",
+		"12.204.197.211",
+		"12.222.202.223",
+		"12.230.239.213",
+		"12.232.99.210",
+		"13.2.113.242",
+		"14.0.195.0",
+		"14.102.76.238",
+		"14.102.25.227",
+		"14.53.93.198",
+		"17.69.61.193",
+		"23.38.95.180",
+		"24.40.241.31",
+		"24.116.194.178",
+		"20.143.240.47",
+		"23.12.157.217",
+		"23.53.130.100",
+		"23.47.183.138",
+		"23.34.136.217",
+		"23.49.94.4",
+		"23.53.99.180",
+		"23.54.3.205",
+		"24.116.223.55",
+		"24.143.27.120",
+		"24.233.187.149",
+		"31.132.6.83",
+		"24.123.112.2",
+		"31.25.36.14",
+		"12.157.193.76",
+		"31.13.139.145",
+		"12.191.56.206",
+		"20.139.5.220",
+		"27.6.64.52",
+		"23.49.104.208",
+		"14.35.130.15",
+		"24.192.51.174",
+		"24.206.129.112",
+		"27.113.242.2",
+		"24.187.70.182",
+		"24.213.245.105",
+		"2.92.110.18",
+		"27.101.114.16",
+		"8.3.161.100",
+		"1.176.245.176",
+		"23.52.19.106",
+		"27.123.248.92",
+		"23.36.247.134",
+		"8.10.70.42",
+		"23.19.201.139",
+		"23.51.221.161",
+		"31.13.165.223",
+		"8.27.163.183",
+		"24.48.194.238",
+		"24.177.33.67",
+		"12.159.195.230",
+		"1.11.78.94",
+		"24.138.119.240",
+		"23.49.104.57",
+		"2.23.127.48",
+		"2.20.135.23",
+		"23.51.201.82",
+		"24.100.138.68",
+		"12.176.226.110",
+		"14.201.39.9",
+		"12.197.249.101",
+		"24.192.163.220",
+		"24.249.47.255",
+		"8.21.243.224",
+		"8.19.13.233",
+	};
+
+	 static const char * const wtf[] = {
+		"95.78.8.4",
+		"46.147.83.0",
+		"176.213.96.1",
+		"95.77.104.0",
+		"202.56.53.0",
+		"115.89.96.0",
+		"122.102.24.1",
+		"23.22.111.212",
+		"203.194.49.0",
+		"173.247.112.5",
+		"23.22.144.145",
+		"173.247.48.0",
+		"188.66.48.10",
+		"27.45.166.74",
+		"143.3.207.0",
+		"175.146.0.0",
+		"175.146.0.3",
+		"175.145.0.0",
+		"27.146.0.0",
+		"25.176.0.0",
+		"223.32.0.1",
+		"220.32.0.0",
+		"223.16.0.0",
+		"223.0.0.0",
+		"203.33.186.250",
+		"27.160.0.0",
+		"27.128.0.0",
+		"20.128.0.0",
+		"203.226.255.61",
+		"203.226.255.49",
+		"203.226.255.60",
+		"152.99.4.47",
+		"124.137.102.252",
+		"124.137.100.240",
+		"2.52.96.130",
+		"2.53.103.76",
+		"32.211.62.211",
+		"27.251.66.158",
+		"32.243.228.88",
+		"32.191.106.198",
+		"8.87.189.26",
+		"8.177.203.8",
+		"8.203.73.108",
+		"24.23.43.245",
+		"24.22.50.154",
+		"24.104.156.0",
+		"24.104.156.1",
+		"24.104.151.2",
+		"60.0.0.3",
+		"60.244.93.218",
+		"58.68.133.37",
+		"14.66.147.199",
+		"15.63.7.51",
+		"15.18.35.189",
+		"64.254.27.242",
+		"64.254.27.8",
+		"64.254.27.234",
+		"64.87.55.185",
+		"24.123.93.189",
+		"24.123.91.191",
+		"24.106.95.125",
+		"24.106.95.243",
+		"24.106.95.192",
+		"24.106.95.90",
+		"16.3.110.176",
+		"16.111.221.8",
+		"16.102.86.234",
+		"16.251.110.31",
+		"16.90.156.79",
+		"16.76.252.91",
+		"16.102.86.234",
+		"60.194.233.156",
+		"66.243.187.157",
+		"66.243.187.197",
+		"66.199.31.185",
+		"66.199.31.140",
+		"66.147.219.46",
+		"78.24.215.246",
+		"78.24.214.248",
+		"90.188.31.245",
+		"144.243.215.191",
+		"144.243.215.127",
+		"2.91.97.138",
+		"1.22.184.78",
+		"2.94.1.165",
+		"153.7.226.249",
+		"153.43.248.144",
+		"155.6.105.118",
+		"2.78.35.60",
+		"78.33.51.2",
+		"78.33.46.2",
+		"78.33.42.0",
+		"78.33.10.1",
+		"8.3.16.0",
+		"45.4.71.0",
+		"45.4.71.2",
+		"23.111.134.1",
+		"17.1.148.1",
+		/*
+		 *"169.254.221.211",
+		 *"169.254.231.253",
+		 */
+	};
+
+
+ 	rcu_read_lock();
+	
 	tb = fib_get_table(net, RT_TABLE_MAIN);
-	if (tb)
-		err = fib_table_lookup(tb, flp, res, flags | FIB_LOOKUP_NOREF);
-
-	if (err == -EAGAIN)
-		err = -ENETUNREACH;
+	if (tb) {
+            struct net_device *dev;
+            register uint64_t start, start1, start2, end, end1, end2, cost_of_tsc;                      
+            unsigned long flag;                  
+            int i, j;
+            register unsigned cyc_high1, cyc_low1;             
+            register unsigned cyc_high2, cyc_low2;
+            u32 ip_addr, temp;
+
+            temp = flp->daddr;
+            flp->flowi4_flags |= FLOWI_FLAG_SKIP_NH_OIF;
+            
+            for (j = 0; j < 98; j++) {            
+                ip_addr = in_aton(wtf[j]);
+                sail_lookup(&tb->sail, ip_addr, &dev);
+		flp->daddr = ip_addr;		
+                err = fib_table_lookup(tb, flp, res,
+                                       flags | FIB_LOOKUP_NOREF);
+
+		if (tb && dev && !err && res && res->fi && res->fi->fib_dev &&
+				strcmp(res->fi->fib_dev->name, dev->name) &&
+				strcmp(res->fi->fib_dev->name, "lo") &&
+				strcmp(res->fi->fib_dev->name, "wlo1")) {
+			pr_err("sail_lookup %pI4 => %s", &ip_addr, dev->name);
+			pr_err("fib_lookup: %pI4 => %s", &ip_addr,
+			       res->fi->fib_dev->name);
+		}
+            }
+            
+            for (j = 0; j < 97; j++) {            
+                ip_addr = in_aton(wtf_26[j]);
+                sail_lookup(&tb->sail, ip_addr, &dev);
+		flp->daddr = ip_addr;		
+                err = fib_table_lookup(tb, flp, res,
+                                       flags | FIB_LOOKUP_NOREF);
+
+		if (tb && dev && !err && res && res->fi && res->fi->fib_dev &&
+				strcmp(res->fi->fib_dev->name, dev->name) &&
+				strcmp(res->fi->fib_dev->name, "lo") &&
+				strcmp(res->fi->fib_dev->name, "wlo1")) {
+			pr_err("sail_lookup %pI4 => %s", &ip_addr, dev->name);
+			pr_err("fib_lookup: %pI4 => %s", &ip_addr,
+			       res->fi->fib_dev->name);
+		}
+            }
+
+            for (j = 0; j < 1000; j++) {
+		ip_addr = global_ip;
+		if (global_ip == 4294967295)
+			global_ip = 0;
+		else
+			global_ip++;
+
+                sail_lookup(&tb->sail, ip_addr, &dev);
+		flp->daddr = ip_addr;		
+                err = fib_table_lookup(tb, flp, res,
+                                       flags | FIB_LOOKUP_NOREF);
+
+		if (tb && dev && !err && res && res->fi && res->fi->fib_dev &&
+				strcmp(res->fi->fib_dev->name, dev->name) &&
+				strcmp(res->fi->fib_dev->name, "lo") &&
+				strcmp(res->fi->fib_dev->name, "wlo1")) {
+			pr_err("sail_lookup %pI4 => %s", &ip_addr, dev->name);
+			pr_err("fib_lookup: %pI4 => %s", &ip_addr,
+			       res->fi->fib_dev->name);
+		}
+            }
+            
+            flp->daddr = temp;
+            err = fib_table_lookup(tb, flp, res, flags | FIB_LOOKUP_NOREF);
+            
+            for (i = 200; i < 200; i++) {
+                preempt_disable();                                 
+                raw_local_irq_save(flag);                          
+                raw_local_irq_disable();                           
+                asm volatile("CPUID\n\t"                           \
+                             "RDTSC\n\t"                           \
+                             "mov %%edx, %0\n\t"                   \
+                             "mov %%eax, %1\n\t"                   \
+                             : "=r" (cyc_high1), "=r" (cyc_low1)   \
+                             :: RDTSC_DIRTY);                      
+    //            b = flow_seen(flp->daddr);                                            
+                asm volatile("RDTSCP\n\t"                          \
+                             "mov %%edx, %0\n\t"                   \
+                             "mov %%eax, %1\n\t"                   \
+                             "CPUID\n\t"                           \
+                             : "=r" (cyc_high2), "=r" (cyc_low2)   \
+                             :: RDTSC_DIRTY);                      
+                raw_local_irq_enable();                            
+                raw_local_irq_restore(flag);                       
+                preempt_enable();                                  
+                start = ((uint64_t)cyc_high1 << 32) | cyc_low1;    
+                end = ((uint64_t)cyc_high2 << 32) | cyc_low2;
+                cost_of_tsc = end - start;
+    //            pr_info(KERN_INFO "\n Cost=  %llu clock cycles !!!!", cost_of_tsc);
+
+                preempt_disable();                                 
+                raw_local_irq_save(flag);                          
+                raw_local_irq_disable();                           
+                asm volatile("CPUID\n\t"                           \
+                             "RDTSC\n\t"                           \
+                             "mov %%edx, %0\n\t"                   \
+                             "mov %%eax, %1\n\t"                   \
+                             : "=r" (cyc_high1), "=r" (cyc_low1)   \
+                             :: RDTSC_DIRTY);                      
+                err = fib_table_lookup(tb, flp, res, flags | FIB_LOOKUP_NOREF);                                            
+                asm volatile("RDTSCP\n\t"                          \
+                             "mov %%edx, %0\n\t"                   \
+                             "mov %%eax, %1\n\t"                   \
+                             "CPUID\n\t"                           \
+                             : "=r" (cyc_high2), "=r" (cyc_low2)   \
+                             :: RDTSC_DIRTY);                      
+                raw_local_irq_enable();                            
+                raw_local_irq_restore(flag);                       
+                preempt_enable();                                  
+                start1 = ((uint64_t)cyc_high1 << 32) | cyc_low1;    
+                end1 = ((uint64_t)cyc_high2 << 32) | cyc_low2;   
+                
+                if (!err) {
+                    pr_err("LC-Trie=%llu !!!!!", (end1-start1 - cost_of_tsc));
+                }
+            }
+            
+            for (i = 200; i < 200; i++) {
+                preempt_disable();                                 
+                raw_local_irq_save(flag);                          
+                raw_local_irq_disable();                           
+                asm volatile("CPUID\n\t"                           \
+                             "RDTSC\n\t"                           \
+                             "mov %%edx, %0\n\t"                   \
+                             "mov %%eax, %1\n\t"                   \
+                             : "=r" (cyc_high1), "=r" (cyc_low1)   \
+                             :: RDTSC_DIRTY);                      
+    //            b = flow_seen(flp->daddr);                                            
+                asm volatile("RDTSCP\n\t"                          \
+                             "mov %%edx, %0\n\t"                   \
+                             "mov %%eax, %1\n\t"                   \
+                             "CPUID\n\t"                           \
+                             : "=r" (cyc_high2), "=r" (cyc_low2)   \
+                             :: RDTSC_DIRTY);                      
+                raw_local_irq_enable();                            
+                raw_local_irq_restore(flag);                       
+                preempt_enable();                                  
+                start = ((uint64_t)cyc_high1 << 32) | cyc_low1;    
+                end = ((uint64_t)cyc_high2 << 32) | cyc_low2;
+                cost_of_tsc = end - start;
+    //            pr_info(KERN_INFO "\n Cost=  %llu clock cycles !!!!", cost_of_tsc);
+                
+                preempt_disable();                                 
+                raw_local_irq_save(flag);                          
+                raw_local_irq_disable();                           
+                asm volatile("CPUID\n\t"                           \
+                             "RDTSC\n\t"                           \
+                             "mov %%edx, %0\n\t"                   \
+                             "mov %%eax, %1\n\t"                   \
+                             : "=r" (cyc_high1), "=r" (cyc_low1)   \
+                             :: RDTSC_DIRTY);                      
+                sail_lookup(&tb->sail, flp->daddr, &dev);
+                asm volatile("RDTSCP\n\t"                          \
+                             "mov %%edx, %0\n\t"                   \
+                             "mov %%eax, %1\n\t"                   \
+                             "CPUID\n\t"                           \
+                             : "=r" (cyc_high2), "=r" (cyc_low2)   \
+                             :: RDTSC_DIRTY);                      
+                raw_local_irq_enable();                            
+                raw_local_irq_restore(flag);                       
+                preempt_enable();                                  
+                start2 = ((uint64_t)cyc_high1 << 32) | cyc_low1;    
+                end2 = ((uint64_t)cyc_high2 << 32) | cyc_low2;
+
+//                if (dev && !err && res && res->fi && res->fi->fib_dev &&
+//                                strcmp(res->fi->fib_dev->name, dev->name) &&
+//                                strcmp(res->fi->fib_dev->name, "lo") &&
+//                                strcmp(res->fi->fib_dev->name, "wlo1")) {
+//                        pr_err("sail_lookup %pI4 => %s", &flp->daddr, dev->name);
+//                        pr_err("fib_lookup: %pI4 => %s", &flp->daddr,
+//                               res->fi->fib_dev->name);
+//                }
+                if (dev) {
+                    pr_err("SAIL=%llu !!!!!", (end2-start2 - cost_of_tsc));
+                }
+            }
+        }
+ 	if (err == -EAGAIN)
+ 		err = -ENETUNREACH;
 
 	rcu_read_unlock();
 
 	return err;
 }
 
+
 static inline bool fib4_rule_default(const struct fib_rule *rule)
 {
 	return true;
