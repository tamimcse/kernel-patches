diff --git a/samples/bpf/Makefile b/samples/bpf/Makefile
index 36f9f41..0704c57 100644
--- a/samples/bpf/Makefile
+++ b/samples/bpf/Makefile
@@ -51,6 +51,7 @@ hostprogs-y += cpustat
 hostprogs-y += xdp_adjust_tail
 hostprogs-y += xdpsock
 hostprogs-y += xdp_fwd
+hostprogs-y += rcp_router
 hostprogs-y += task_fd_query
 hostprogs-y += xdp_sample_pkts
 
@@ -107,6 +108,7 @@ cpustat-objs := bpf_load.o cpustat_user.o
 xdp_adjust_tail-objs := xdp_adjust_tail_user.o
 xdpsock-objs := xdpsock_user.o
 xdp_fwd-objs := xdp_fwd_user.o
+rcp_router-objs := rcp_router_user.o
 task_fd_query-objs := bpf_load.o task_fd_query_user.o $(TRACE_HELPERS)
 xdp_sample_pkts-objs := xdp_sample_pkts_user.o $(TRACE_HELPERS)
 
@@ -164,6 +166,7 @@ always += cpustat_kern.o
 always += xdp_adjust_tail_kern.o
 always += xdpsock_kern.o
 always += xdp_fwd_kern.o
+always += rcp_router_kern.o
 always += task_fd_query_kern.o
 always += xdp_sample_pkts_kern.o
 
diff --git a/samples/bpf/rcp_router_kern.c b/samples/bpf/rcp_router_kern.c
new file mode 100644
index 0000000..8d47014
--- /dev/null
+++ b/samples/bpf/rcp_router_kern.c
@@ -0,0 +1,163 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright (c) 2019-20 MD Iftakharul Islam (Tamim) <mislam4@kent.edu>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of version 2 of the GNU General Public
+ * License as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ */
+#define KBUILD_MODNAME "foo"
+#include <uapi/linux/bpf.h>
+#include <linux/in.h>
+#include <linux/if_ether.h>
+#include <linux/if_packet.h>
+#include <linux/if_vlan.h>
+#include <linux/ip.h>
+#include <linux/ipv6.h>
+
+#include "bpf_helpers.h"
+
+#define bpf_printk(fmt, ...)					\
+({								\
+	       char ____fmt[] = fmt;				\
+	       bpf_trace_printk(____fmt, sizeof(____fmt),	\
+				##__VA_ARGS__);			\
+})
+
+struct pkthdr {
+        /*Ethernet header starts here. */
+	unsigned char	h_dest[ETH_ALEN];	/* destination eth addr	*/
+	unsigned char	h_source[ETH_ALEN];	/* source ether addr	*/
+	__be16		h_proto;		/* packet type ID field	*/
+        
+        /*IP header starts here. */
+#if defined(__LITTLE_ENDIAN_BITFIELD)
+	__u8	ihl:4,
+		version:4;
+#elif defined (__BIG_ENDIAN_BITFIELD)
+	__u8	version:4,
+  		ihl:4;
+#else
+#error	"Please fix <asm/byteorder.h>"
+#endif
+	__u8	tos;
+	__be16	tot_len;
+	__be16	id;
+	__be16	frag_off;
+	__u8	ttl;
+	__u8	protocol;
+	__sum16	check_ip;
+	__be32	saddr;
+	__be32	daddr;
+	/*The IP header options start here. */
+        /*TCP header starts here. */        
+	__be16	source;
+	__be16	dest;
+	__be32	seq;
+	__be32	ack_seq;
+#if defined(__LITTLE_ENDIAN_BITFIELD)
+	__u16	res1:4,
+		doff:4,
+		fin:1,
+		syn:1,
+		rst:1,
+		psh:1,
+		ack:1,
+		urg:1,
+		ece:1,
+		cwr:1;
+#elif defined(__BIG_ENDIAN_BITFIELD)
+	__u16	doff:4,
+		res1:4,
+		cwr:1,
+		ece:1,
+		urg:1,
+		ack:1,
+		psh:1,
+		rst:1,
+		syn:1,
+		fin:1;
+#else
+#error	"Adjust your <asm/byteorder.h> defines"
+#endif	
+	__be16	window;
+	__sum16	check_tcp;
+	__be16	urg_ptr;
+	/*The TCP header options start here. */
+        __u32 tcp_op1;
+        __u16 tcp_op2;
+        /*TCP MF option header starts here. */
+        __u8	mf_op_len;
+        __u8 mf_op_req_thput;           /* Required throughput in MF */ 
+        __u8 mf_op_cur_thput;           /* Current throughput in MF */
+        __u8 mf_op_feedback_thput;      /* Feedback throughput in MF */
+        __u8 mf_op_prop_delay_est;
+};
+
+struct per_port_states {
+    /*Number of bytes sent*/    
+    u64 B;
+    /*Number of on-goinhg flows*/
+    u32 N;
+    u64 Q;
+    /*Number of packets received during the control interval*/
+    u64 n;
+    /*Feedback rate of this router*/
+    u64 R;
+    u32 rtt_tot, rtt_a;
+};
+
+struct bpf_map_def SEC("maps") states_map = {
+	.type		= BPF_MAP_TYPE_PERCPU_ARRAY,
+	.key_size	= sizeof(u32),
+	.value_size	= sizeof(struct per_port_states),
+	.max_entries	= 1,
+};
+
+/*This name needs to match to that of the file name*/
+SEC("rcp_router")
+int xcp_router_prog(struct xdp_md *ctx)
+{
+    void *data_end = (void *)(long)ctx->data_end;
+    void *data = (void *)(long)ctx->data;
+    int len = data_end - data;
+    struct pkthdr *ph = data;
+    struct per_port_states *states;
+    u32 key = 0;
+    u64 Q;
+    
+    if (data + 67 > data_end)
+            return XDP_DROP;
+    
+    if (unlikely(ph->version != 4))
+        return XDP_DROP;
+
+    /* sudo cat /sys/kernel/debug/tracing/trace_pipe to see the BPF debug output */        
+    bpf_printk("Hello world %d \n", len);/* DEBUG ONLY */
+
+    states = bpf_map_lookup_elem(&states_map, &key);
+    if (!states)
+            return XDP_ABORTED;
+    states->n++;
+    states->B += len;
+    Q = 100;
+    if(states->Q > Q)
+        states->Q = Q;
+    
+    states->rtt_tot += ph->mf_op_prop_delay_est;
+    if(ph->mf_op_feedback_thput > states->R){
+        ph->mf_op_feedback_thput = states->R;
+        bpf_printk("Setting RCP throughput %llu \n", states->R);
+    }
+    
+    if (bpf_map_update_elem(&states_map, &key, states, BPF_EXIST) != 0)
+            return XDP_ABORTED;
+        
+    return XDP_PASS;
+}
+
+char _license[] SEC("license") = "GPL";
diff --git a/samples/bpf/rcp_router_user.c b/samples/bpf/rcp_router_user.c
new file mode 100644
index 0000000..0d077e3
--- /dev/null
+++ b/samples/bpf/rcp_router_user.c
@@ -0,0 +1,254 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright (c) 2019-20 MD Iftakharul Islam (Tamim) <mislam4@kent.edu>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of version 2 of the GNU General Public
+ * License as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ */
+
+#include <linux/bpf.h>
+#include <linux/if_link.h>
+#include <linux/limits.h>
+#include <net/if.h>
+#include <errno.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <stdbool.h>
+#include <string.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <libgen.h>
+
+#include "bpf/libbpf.h"
+#include <bpf/bpf.h>
+
+#include <unistd.h>
+#include <signal.h>
+
+#include "bpf_util.h"
+
+
+struct per_port_states {
+    /*Number of bytes sent*/    
+    uint64_t B;
+    /*Number of on-goinhg flows*/
+    uint32_t N;
+    uint64_t Q;
+    /*Number of packets received during the control interval*/
+    uint64_t n;
+    /*Feedback rate of this router*/
+    uint64_t R;
+    uint32_t rtt_tot, rtt_a;
+};
+
+
+static void usage(const char *prog)
+{
+	fprintf(stderr,
+		"usage: %s [OPTS] interface-list\n"
+		"\nOPTS:\n"
+		"    -d    detach program\n"
+		"    -D    direct table lookups (skip fib rules)\n",
+		prog);
+}
+
+static int nr_cpus;
+static int map_fd, prog_fd;
+static struct bpf_object *obj;
+
+int states_init(struct per_port_states *states);
+int states_reset(struct per_port_states *states);
+int calc_rcp_rate(struct per_port_states *states);
+void on_alarm(int signum);
+
+
+static int do_attach(int idx, int fd, const char *name)
+{
+	int err;
+
+	err = bpf_set_link_xdp_fd(idx, fd, 0);
+	if (err < 0)
+		printf("ERROR: failed to attach program to %s\n", name);
+
+	return err;
+}
+
+static int do_detach(int idx, const char *name)
+{
+	int err;
+
+	err = bpf_set_link_xdp_fd(idx, -1, 0);
+	if (err < 0)
+		printf("ERROR: failed to detach program from %s\n", name);
+
+	return err;
+}
+
+int states_init(struct per_port_states *states)
+{
+  states->rtt_a = 200;
+  states->n = 200;
+  states->N = 200;
+  states->R = 200;
+  states->B = 450;
+  states->Q = 0;
+  return 0;
+}
+
+int states_reset(struct per_port_states *states)
+{
+  states->rtt_a = 200;
+  states->rtt_tot = 0;
+  states->n = 0;
+  states->N = 200;
+  states->R = 200;
+  states->B = 0;
+  states->Q = 0;
+  return 0;
+}
+
+int calc_rcp_rate(struct per_port_states *states)
+{
+    uint64_t S = states->rtt_a == 0 ? 2000 : 2000 - states->B/states->rtt_a;
+    states->rtt_a = states->n == 0 ? 200 : states->rtt_tot/states->n;
+    states->R = states->N == 0 ? 2000 : states->R + ((400 * states->rtt_a * S - 226 * states->Q)/(1000 * states->N));
+    printf("In calc_rcp_rate. B=%llu RTT_a=%u S=%llu Q=%llu N=%u %llu \n", states->B, states->rtt_a, S, states->Q, states->N, states->R);	
+    return 0;
+}
+
+void on_alarm(int signum)
+{
+    struct bpf_map *map;
+    struct per_port_states allstates[nr_cpus];
+    uint32_t key = 0;
+    struct per_port_states states;
+    
+    map = bpf_object__find_map_by_name(obj, "states_map");
+    map_fd = bpf_map__fd(map);
+    if (map_fd < 0) {
+            printf("states_map not found: %s\n", strerror(map_fd));
+            return;
+    }
+    
+    if (bpf_map_lookup_elem(map_fd, &key, allstates) < 0)
+            return;
+    
+    states = allstates[0];    
+    calc_rcp_rate(&states);    
+    states_reset(&states);
+    
+    if (bpf_map_update_elem(map_fd, &key, &states, BPF_ANY) != 0) {
+            fprintf(stderr, "states_map map update failed: %s\n", strerror(errno));
+            return;
+    }
+    
+    ualarm(states.rtt_a * 1000, 0);  // Reschedule alarm
+}
+
+int main(int argc, char **argv)
+{
+	struct bpf_prog_load_attr prog_load_attr = {
+		.prog_type	= BPF_PROG_TYPE_XDP,
+	};
+	const char *prog_name = "rcp_router";
+	struct bpf_program *prog;
+	char filename[PATH_MAX];
+
+	int attach = 1;
+	int ret = 0;
+        struct bpf_map *map;
+        struct per_port_states states;
+        int opt, i, idx, err;
+        uint32_t key = 0;
+        
+	nr_cpus = bpf_num_possible_cpus();
+	printf("nr_cpus:%d\n\n", nr_cpus);
+        
+        
+        signal( SIGALRM, on_alarm ); // Install handler first,
+
+	while ((opt = getopt(argc, argv, ":dD")) != -1) {
+		switch (opt) {
+		case 'd':
+			attach = 0;
+			break;
+		default:
+			usage(basename(argv[0]));
+			return 1;
+		}
+	}
+
+	if (optind == argc) {
+		usage(basename(argv[0]));
+		return 1;
+	}
+
+	if (attach) {
+		snprintf(filename, sizeof(filename), "%s_kern.o", argv[0]);
+		prog_load_attr.file = filename;
+
+		if (access(filename, O_RDONLY) < 0) {
+			printf("error accessing file %s: %s\n",
+				filename, strerror(errno));
+			return 1;
+		}
+		if (bpf_prog_load_xattr(&prog_load_attr, &obj, &prog_fd))
+			return 1;
+
+		prog = bpf_object__find_program_by_title(obj, prog_name);
+		prog_fd = bpf_program__fd(prog);
+		if (prog_fd < 0) {
+			printf("program not found: %s\n", strerror(prog_fd));
+			return 1;
+		}
+                
+                map = bpf_object__find_map_by_name(obj, "states_map");
+		map_fd = bpf_map__fd(map);
+		if (map_fd < 0) {
+			printf("states_map map not found: %s\n", strerror(map_fd));
+			return 1;
+		}
+                
+                if(bpf_map_lookup_elem(map_fd, &key, &states) < 0)
+                        return XDP_ABORTED;
+                
+                states_init(&states);
+                
+                if (bpf_map_update_elem(map_fd, &key, &states, BPF_ANY) != 0) {
+                        fprintf(stderr, "states_map map update failed: %s\n", strerror(errno));
+                        return XDP_ABORTED;
+                }
+                
+                ualarm(states.rtt_a * 1000, 0);               
+	}
+
+	for (i = optind; i < argc; ++i) {
+		idx = if_nametoindex(argv[i]);
+		if (!idx)
+			idx = strtoul(argv[i], NULL, 0);
+
+		if (!idx) {
+			fprintf(stderr, "Invalid arg\n");
+			return 1;
+		}
+		if (!attach) {
+			err = do_detach(idx, argv[i]);
+			if (err)
+				ret = err;
+		} else {
+			err = do_attach(idx, prog_fd, argv[i]);
+			if (err)
+				ret = err;
+		}
+	}
+        
+        printf("Press ENTER key to Continue\n");  
+        getchar(); 
+        
+	return ret;
+}
