diff --git a/MAINTAINERS b/MAINTAINERS
index b22e7fd..969e625 100644
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -7630,6 +7630,11 @@ M:	Juanjo Ciarlante <jjciarla@raiz.uncu.edu.ar>
 S:	Maintained
 F:	net/ipv4/netfilter/ipt_MASQUERADE.c
 
+SAIL FIB LOOKUP
+M:	MD Iftakharul Islam (Tamim) <tamim@csebuet.org>
+S:	Maintained
+F:	net/ipv4/fib_sail_xdp.c
+
 IPMI SUBSYSTEM
 M:	Corey Minyard <minyard@acm.org>
 L:	openipmi-developer@lists.sourceforge.net (moderated for non-subscribers)
diff --git a/include/net/ip6_fib.h b/include/net/ip6_fib.h
index 3d49305..ed7e64d 100644
--- a/include/net/ip6_fib.h
+++ b/include/net/ip6_fib.h
@@ -40,6 +40,75 @@
 struct rt6_info;
 struct fib6_info;
 
+#if IS_ENABLED(CONFIG_FIB_SAIL_XDP)
+/*
+ * The router can have upto 255 ports. This limitation
+ * allows us to represent netdev_index as an u8
+ */
+#define NETDEV_COUNT_MAX 255
+
+struct bitmap_pc {
+    u64 bitmap;
+    u16 popcnt;
+};
+
+struct PPC {
+	/*default next-hop (Level 0)*/
+	u8	def_nh;
+
+	/*Level 16*/
+	u8 __rcu *N16;
+	u8 __rcu *P16;
+	u16 __rcu *C16;
+
+	/*Level 24*/
+	u8 __rcu *N24;
+	u8 __rcu *P24;
+        u16 __rcu *C24;
+	u32 cnk24_count;/*Number of chunks in level 24*/
+        
+	/*Level 32*/
+	u8 __rcu *N32;
+	u8 __rcu *P32;
+        u16 __rcu *C32;
+	u32 cnk32_count;/*Number of chunks in level 32*/
+
+
+	/*Level 40*/
+	u8 __rcu *N40;
+	u8 __rcu *P40;
+        u16 __rcu *C40;
+	u32 cnk40_count;/*Number of chunks in level 40*/
+        
+	/*Level 48*/
+	u8 __rcu *N48;
+	u8 __rcu *P48;
+        u16 __rcu *C48;
+	u32 cnk48_count;/*Number of chunks in level 48*/
+        
+	/*Level 56*/
+	u8 __rcu *N56;
+	u8 __rcu *P56;
+        u16 __rcu *C56;
+	u32 cnk56_count;/*Number of chunks in level 48*/
+
+	/*Level 64*/
+	u8 __rcu *N64;
+	u8 __rcu *P64;
+        u32 cnk64_count;/*Number of chunks in level 64*/
+
+	/*Index to this array is stored in N16, N24 and N32*/
+	struct net_device	*netdevs[NETDEV_COUNT_MAX];
+	u8 netdev_count;/*Number of netdevs*/
+
+	spinlock_t lock;
+};
+
+int ppc_insert(struct PPC *p, u64 key, u8 prefix_len, struct net_device *dev);
+int ppc_lookup(const struct PPC *p, const u64 dest, struct net_device **dev);
+#endif
+
+
 struct fib6_config {
 	u32		fc_table;
 	u32		fc_metric;
@@ -342,6 +411,10 @@ struct fib6_table {
 	struct fib6_node	tb6_root;
 	struct inet_peer_base	tb6_peers;
 	unsigned int		flags;
+#if IS_ENABLED(CONFIG_FIB_SAIL_XDP)
+	/*Each FIB table will have its own PPC structure.*/
+	struct PPC	ppc;
+#endif
 	unsigned int		fib_seq;
 #define RT6_TABLE_HAS_DFLT_ROUTER	BIT(0)
 };
diff --git a/net/ipv4/Kconfig b/net/ipv4/Kconfig
index 32cae39..5c41071 100644
--- a/net/ipv4/Kconfig
+++ b/net/ipv4/Kconfig
@@ -52,6 +52,17 @@ config IP_ADVANCED_ROUTER
 
 	  If unsure, say N here.
 
+config FIB_SAIL_XDP
+	bool "SAIL based FIB lookup for XDP"
+	depends on !IP_ROUTE_MULTIPATH && !LWTUNNEL
+	default y
+	help
+	  This option will enable SAIL based routing table lookup for XDP
+	  forwarding. This will store FIB table as a SAIL (along with
+	  LC-trie). Currently it only supports up to 255 ports. Currently
+	  it does not support multi-path routing and light-weight
+	  tunnels such as MPLS.
+
 config IP_FIB_TRIE_STATS
 	bool "FIB TRIE statistics"
 	depends on IP_ADVANCED_ROUTER
diff --git a/net/ipv6/Makefile b/net/ipv6/Makefile
index e0026fa..3cf2572 100644
--- a/net/ipv6/Makefile
+++ b/net/ipv6/Makefile
@@ -48,6 +48,7 @@ obj-$(CONFIG_IPV6_SIT) += sit.o
 obj-$(CONFIG_IPV6_TUNNEL) += ip6_tunnel.o
 obj-$(CONFIG_IPV6_GRE) += ip6_gre.o
 obj-$(CONFIG_IPV6_FOU) += fou6.o
+obj-$(CONFIG_FIB_SAIL_XDP) += fib_sail_xdp.o
 
 obj-y += addrconf_core.o exthdrs_core.o ip6_checksum.o ip6_icmp.o
 obj-$(CONFIG_INET) += output_core.o protocol.o $(ipv6-offload)
diff --git a/net/ipv6/fib_sail_xdp.c b/net/ipv6/fib_sail_xdp.c
new file mode 100644
index 0000000..4994aa6
--- /dev/null
+++ b/net/ipv6/fib_sail_xdp.c
@@ -0,0 +1,744 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright (c) 2018-19 MD Iftakharul Islam (Tamim) <mislam4@kent.edu>
+ *
+ *   This program is free software; you can redistribute it and/or
+ *   modify it under the terms of the GNU General Public License
+ *   as published by the Free Software Foundation; either version
+ *   2 of the License, or (at your option) any later version.
+ */
+
+#include <net/ip6_fib.h>
+
+/*The length of N16, P16 and C16 is 2^16*/
+#define LEVEL16_SIZE 65536
+
+/*Number of chunks in level 32*/
+#define NUM32 64
+#define NUM24 64
+
+/*Number of chunks in level 40 and 48*/
+#define NUM40 8192
+
+/*Number of chunks in level 64*/
+#define NUM64 400
+
+/*chunk size is 2^8*/
+#define CNK_8 256
+
+/*As we group each 64 elements, each chunk in level 32 and level 64 
+ * contains 1024 (65536/64) elements. On the other hand, chunks in level 40 and 
+ * level 48 contain 4 (256/64) chunks */
+#define ELEMS_PER_CHUNK 1024
+#define ELEMS_PER_CHUNK_40 4
+
+/*The size of B32 and C32. Here each chunk consists of 64 groups*/
+#define B32_SIZE NUM32 * ELEMS_PER_CHUNK
+
+/*The size of N24/P24*/
+#define N24_SIZE NUM24 * CNK_8
+
+/*The size of N32/P32/N64/P64*/
+#define N32_SIZE NUM32 * CNK_8
+
+/*The size of N64/P64*/
+#define N64_SIZE NUM64 * CNK_8
+
+/*The size of C40 and C48. Here each chunk consists of 4 groups*/
+#define C40_C48_SIZE NUM40 * ELEMS_PER_CHUNK_40
+
+/*The size of N40/P40/N48/P48*/
+#define N40_N48_SIZE NUM40 * CNK_8
+
+#define B64_SIZE NUM64 * CNK_8
+
+/*chunk size is 2^16*/
+#define CNK_16 65536
+
+
+
+#define MSK 0X8000000000000000ULL
+
+/*Calculates the number of bits set to 1*/
+#define POPCNT(X) (hweight64(X))
+
+/*POPCNT of right-most N bits of X*/
+#define POPCNT_RGT(X, N) (hweight64(((1ULL << (N)) - 1) & (X)))
+
+/*POPCNT of left-most N bits of X*/
+#define POPCNT_LFT(X, N) (hweight64(((0XFFFFFFFFFFFFFFFFULL << (63 - (N))) << 1) & (X)))
+
+static u16 calc_idx(struct bitmap_pc *c, u32 off)
+{
+	return c->popcnt + POPCNT_LFT(c->bitmap, off);
+}
+
+/*Converts a net_device to corresponding netdev_index*/
+static u8 get_netdev_index(struct PPC *p, struct net_device *dev)
+{
+	u8 i;
+
+	/*checks if the net_device is already seen; if yes then return the
+	 *corresponding index
+	 */
+	for (i = 0; i < p->netdev_count; i++) {
+		if (p->netdevs[i] == dev)
+			return i;
+	}
+	/*If the net_device is not previously seen, then add it to the array*/
+	p->netdevs[p->netdev_count++] = dev;
+	return p->netdev_count - 1;
+}
+
+/* Insert a new chunk to a level at chunk_id-1. Note that Chunk ID
+ * starts from 1, not 0. This function increments cnk_count of sail.
+ * This is why, it is passed by reference
+ */
+static int bc_arr_insert(struct bitmap_pc *B, struct bitmap_pc *C, u32 *cnk_count, u16 chunk_id, u16 max_cnk_cnt)
+{
+	long long m;
+        u16 b_popcnt = 0, c_popcnt = 0; 
+
+	if (chunk_id > (*cnk_count + 1) || chunk_id < 1) {
+		pr_err("Invalid chunk_id");
+		return -EINVAL;
+	}
+
+	if (*cnk_count >= max_cnk_cnt) {
+		pr_err("Cannot insert a new chunk. The chunk array is full");
+		return -EINVAL;
+	}
+
+	/*shift each element one step right to make
+	 *space for the new one
+	 */
+        memmove(&B[chunk_id * ELEMS_PER_CHUNK], 
+                &B[(chunk_id - 1) * ELEMS_PER_CHUNK], 
+                (*cnk_count - chunk_id + 1) * ELEMS_PER_CHUNK);
+        if (C) {
+            memmove(&C[chunk_id * ELEMS_PER_CHUNK], 
+                    &C[(chunk_id - 1) * ELEMS_PER_CHUNK], 
+                    (*cnk_count - chunk_id + 1) * ELEMS_PER_CHUNK);
+        }
+
+        /*Find the popcnt of the last element to the left*/
+        if (chunk_id > 1) {
+            b_popcnt = B[(chunk_id - 1) * ELEMS_PER_CHUNK - 1].popcnt;
+            if (C)
+                c_popcnt = C[(chunk_id - 1) * ELEMS_PER_CHUNK - 1].popcnt;
+        }
+            
+	/*Reset the newly created empty chunk*/
+	m = (chunk_id - 1) * ELEMS_PER_CHUNK;
+	for (; m < chunk_id * ELEMS_PER_CHUNK; m++) {
+            B[m].bitmap = 0;
+            B[m].popcnt = b_popcnt;
+            if (C) {
+                C[m].bitmap = 0;
+                C[m].popcnt = c_popcnt;
+            }
+	}
+
+	++(*cnk_count);
+	return 0;
+}
+
+static int chunk_insert(u8 *N, u8 *P, u16 *C, u32 *cnk_count, u16 chunk_id, u32 cnk_size)
+{
+	long long m;
+        u16 c_popcnt = 0; 
+
+	if (chunk_id > (*cnk_count + 1) || chunk_id < 1) {
+		pr_err("Invalid chunk_id");
+		return -EINVAL;
+	}
+
+	if (*cnk_count >= NUM40) {
+		pr_err("Cannot insert a new chunk. The chunk array is full");
+		return -EINVAL;
+	}
+
+	/*shift each element one step right to make
+	 *space for the new one
+	 */      
+        memmove(&N[chunk_id * cnk_size], &N[(chunk_id - 1) * cnk_size], 
+                (*cnk_count - chunk_id + 1) * cnk_size);
+        memmove(&P[chunk_id * cnk_size], &P[(chunk_id - 1) * cnk_size], 
+                (*cnk_count - chunk_id + 1) * cnk_size);
+        if (C)
+            memmove(&C[chunk_id * cnk_size], &C[(chunk_id - 1) * cnk_size], 
+                (*cnk_count - chunk_id + 1) * cnk_size * 2);
+        
+
+	/*Reset the newly created empty chunk*/
+	m = (chunk_id - 1) * cnk_size;
+	for (; m < chunk_id * cnk_size; m++) {
+		N[m] = 0;
+		P[m] = 0;
+                if (C)
+                    C[m] = 0;
+	}
+
+finish:
+	++(*cnk_count);
+	return 0;
+}
+
+/*Calculate the chunk ID for level 24 based on C16*/
+static u16 calc_ckid24_from_C16(u16 *c16, u32 c16_size, u16 idx16)
+{
+	long long i;
+
+	if (idx16 >= c16_size) {
+		pr_err("Index needs to be smaller than arr_size");
+		return 0;
+	}
+
+	/*Find the first chunk ID to the left and increment that by 1*/
+	for (i = (long long)idx16 - 1; i >= 0; i--) {
+		if (c16[i] > 0)
+			return c16[i] + 1;
+	}
+
+	/*If there is no chunk to the left, then this is the first chunk*/
+	return 1;
+}
+
+/*Update C16 based on the newly inserted chunk*/
+static int update_C16(u16 *c16, u32 c16_size,
+		      u32 idx16, u16 chunk_id)
+{
+	long long i;
+
+	if (idx16 >= c16_size) {
+		pr_err("Invalid index");
+		return -EINVAL;
+	}
+
+	c16[idx16] = chunk_id;
+
+	/* Increment chunk ID to the right */
+	for (i = idx16 + 1; i < c16_size; i++) {
+		if (c16[i] > 0)
+			c16[i]++;
+	}
+        
+	return 0;
+}
+
+/*Calculate the chunk ID for upper level based on CK and C of lower level*/
+static u16 calc_cid(struct bitmap_pc *c, u16 idx, u64 idx_off)
+{
+	long long i;
+	long long index = 0;
+        
+	/*find the index to C24 where previous chunk ID would be found*/
+	if (c[idx].bitmap) {
+		index = c[idx].popcnt + POPCNT_LFT(c[idx].bitmap, idx_off) - 1;
+                if (index >= CNK_16 - 2)
+                    goto err;
+		if (index >= 0)
+			return index + 2;
+	}
+
+	for (i = (long long)idx - 1; i >= 0; i--) {
+            if (c[i].bitmap) {
+                    index = c[i].popcnt + POPCNT(c[i].bitmap) - 1;
+                    if (index >= CNK_16 - 2)
+                        goto err;
+                    return index + 2;
+            }
+	}
+
+	/*If there is no chunk to the left, then this is the first chunk*/
+	return 1;
+err:
+        pr_err("Invalid index");
+        return -EINVAL;
+}
+
+/*Update CK and C based on the newly inserted chunk*/
+static int update_c(struct bitmap_pc *c, u32 idx, u32 idx_off, u32 cnk_count)
+{
+	long long i;
+	u64 index = 0;
+
+	if (c[idx].bitmap & (MSK >> idx_off)) {
+		pr_err("Error: bitmap is already set");
+		return -EINVAL;
+	}
+
+	/*find the index where Chunk ID should be copied to*/
+	if (c[idx].bitmap) {
+		index = c[idx].popcnt + POPCNT_LFT(c[idx].bitmap, idx_off);
+                if (index >= CNK_16)
+                    goto err;
+		goto index_found;
+	}
+
+	/*Find a chunk to the left which is not empty*/
+	for (i = (long long)idx - 1; i >= 0; i--) {
+            if (c[i].bitmap) {
+                    index = c[i].popcnt + POPCNT(c[i].bitmap);
+                    if (index >= CNK_16)
+                        goto err;
+                    goto index_found;
+            }	
+        }
+
+index_found:
+
+	/*This is the first element of this chunk*/
+	if (!c[idx].bitmap)
+		c[idx].popcnt = (u16)index;
+
+	c[idx].bitmap |= (MSK >> idx_off);
+
+	/*Update offset of the chunks to the right*/
+	for (i = (long long)idx + 1; i < cnk_count; i++)
+            if (c[i].bitmap)
+                    c[i].popcnt++;
+
+	return 0;
+err:
+        pr_err("Invalid index");
+        return -EINVAL;
+}
+
+int ppc_insert(struct PPC *p, u64 key, u8 prefix_len, struct net_device *dev)
+{
+	int i;
+	u8 *n16, *p16, *n24, *p24, *n32, *p32, *n40, *p40, *n48, *p48, *n56, *p56, *n64, *p64;
+	u16 *c16;
+        u16 *c24, *c32, *c40, *c48, *c56;
+	u16 chunk_id = 0;
+        u32 n_idx;
+        u32 c_idx;
+        u32 idx, idx_sail;
+        u16 ck_idx;
+	u16 n16_idx;/*Index to N16, P16 and C16*/	     
+	u32 off;
+	u32 num_leafs;/*Number of leafs need to be inserted for this prefix*/
+	u8 netdev_index = get_netdev_index(p, dev);
+	int err = 0;
+        u64 bitmap;
+        u64 tmp;
+        u32 new_prefixes = 0;
+
+	spin_lock(&p->lock);
+
+	/* Default route */
+	if (prefix_len == 0) {
+		p->def_nh = netdev_index;
+		goto finish;
+	}
+
+	/* Preallocate all the arrays at once*/
+	if (!p->N16) {
+		n16 = kcalloc(LEVEL16_SIZE, sizeof(*n16), GFP_ATOMIC);
+		p16 = kcalloc(LEVEL16_SIZE, sizeof(*p16), GFP_ATOMIC);
+		c16 = kcalloc(LEVEL16_SIZE, sizeof(*c16), GFP_ATOMIC);
+
+                n24 = kcalloc(N24_SIZE, sizeof(*n24), GFP_ATOMIC);
+                p24 = kcalloc(N24_SIZE, sizeof(*p24), GFP_ATOMIC);
+                c24 = kcalloc(N24_SIZE, sizeof(*c24), GFP_ATOMIC);
+                
+                n32 = kcalloc(N32_SIZE, sizeof(*n32), GFP_ATOMIC);
+                p32 = kcalloc(N32_SIZE, sizeof(*p32), GFP_ATOMIC);
+                c32 = kcalloc(N32_SIZE, sizeof(*c32), GFP_ATOMIC);
+
+                n40 = kcalloc(N40_N48_SIZE, sizeof(*n40), GFP_ATOMIC);
+                p40 = kcalloc(N40_N48_SIZE, sizeof(*p40), GFP_ATOMIC);
+                c40 = kcalloc(N40_N48_SIZE, sizeof(*c40), GFP_ATOMIC);
+                
+                n48 = kcalloc(N40_N48_SIZE, sizeof(*n48), GFP_ATOMIC);
+                p48 = kcalloc(N40_N48_SIZE, sizeof(*p48), GFP_ATOMIC);
+                c48 = kcalloc(N40_N48_SIZE, sizeof(*c48), GFP_ATOMIC);
+
+                n56 = kcalloc(N64_SIZE, sizeof(*n56), GFP_ATOMIC);
+                p56 = kcalloc(N64_SIZE, sizeof(*p56), GFP_ATOMIC);
+                c56 = kcalloc(N64_SIZE, sizeof(*c56), GFP_ATOMIC);
+                
+                n64 = kcalloc(N64_SIZE, sizeof(*n64), GFP_ATOMIC);
+                p64 = kcalloc(N64_SIZE, sizeof(*p64), GFP_ATOMIC);
+                
+		if (!n16 || !c16 || !p16 || !n32 || !p32 || !c32
+                        || !n40 || !p40 || !c40 || 
+                        !n48 || !p48 || !c48 || !n64 || !p64) {
+			kfree(n16);
+			kfree(c16);
+			kfree(p16);
+                        kfree(n32);
+                        kfree(c32);
+                        kfree(p32);
+                        kfree(n40);
+                        kfree(p40);
+                        kfree(c40);
+                        kfree(n48);
+                        kfree(p48);
+                        kfree(c40);
+                        kfree(n64);
+                        kfree(p64);
+			pr_err("Out of memory while preallocating  SAIL");
+			goto error;
+		}
+
+		RCU_INIT_POINTER(p->N16, n16);
+		RCU_INIT_POINTER(p->P16, p16);
+		RCU_INIT_POINTER(p->C16, c16);
+
+                RCU_INIT_POINTER(p->N24, n24);
+                RCU_INIT_POINTER(p->P24, p24);
+                RCU_INIT_POINTER(p->C24, c24);
+                p->cnk24_count = 0;
+                
+                RCU_INIT_POINTER(p->N32, n32);
+                RCU_INIT_POINTER(p->P32, p32);
+                RCU_INIT_POINTER(p->C32, c32);
+                p->cnk32_count = 0;
+
+                RCU_INIT_POINTER(p->N40, n40);
+                RCU_INIT_POINTER(p->P40, p40);
+                RCU_INIT_POINTER(p->C40, c40);
+                p->cnk40_count = 0;
+                
+                RCU_INIT_POINTER(p->N48, n48);
+                RCU_INIT_POINTER(p->P48, p48);
+                RCU_INIT_POINTER(p->C48, c48);
+                p->cnk48_count = 0;
+                
+                RCU_INIT_POINTER(p->N56, n56);
+                RCU_INIT_POINTER(p->P56, p56);
+                RCU_INIT_POINTER(p->C56, c56);
+                p->cnk56_count = 0;
+           
+                RCU_INIT_POINTER(p->N64, n64);
+                RCU_INIT_POINTER(p->P64, p64);
+                p->cnk64_count = 0;
+                
+		synchronize_rcu();
+	}
+
+	/*Eextract 16 bits from MSB.*/
+	n16_idx = key >> 48;
+
+	if (prefix_len <= 16) {
+		/*All the leafs in level 1~16 will be stored in level 16.*/
+		num_leafs = 1U << (16 - prefix_len);
+		for (i = 0; i < num_leafs; i++) {
+			/*Longer prefix exists*/
+			if (p->P16[n16_idx + i] > prefix_len)
+				continue;
+			p->N16[n16_idx + i] = netdev_index;
+			p->P16[n16_idx + i] = prefix_len;
+		}
+		goto finish;
+	}
+
+	/* The length of the prefix is 17-64. So need to check if there is a
+	 * chunk for this prefix in level 32. C16[n16_idx] = 0 indicates that there
+	 * is no chunk, so need to insert one. The insertion works as
+	 * following:
+	 * 1. Calculate the chunk ID to level 32 from C16. The Chunk ID
+	 * indicates where the new chunk should be inserted.
+	 * 2. Insert a new chunk in level 32
+	 * 3. Update the C16 based on the newly inserted chunk
+	 */
+	if (p->C16[n16_idx] == 0) {
+		/*Step 1*/
+		chunk_id = calc_ckid24_from_C16(p->C16, LEVEL16_SIZE, n16_idx);
+		if (!chunk_id)
+			goto error;
+		/*Step 2*/
+                err = chunk_insert(p->N24, p->P24, p->C24, &p->cnk24_count, chunk_id, CNK_8);
+		if (err) {
+                        pr_err("Could not insert chunk to level 32");
+			goto error;
+                }
+		/*Step 3*/
+		err = update_C16(p->C16, LEVEL16_SIZE, n16_idx, chunk_id);
+		if (err)
+			goto error;
+	}
+
+	/*Extract bit 17-32 and calculate index to B32/C32*/
+        idx = (p->C16[n16_idx] - 1) * CNK_8 + ((key >> 40) & 0XFF);
+        
+	if (prefix_len <= 24) {
+		/*All the leafs in level 1~16 will be stored in level 16.*/
+		num_leafs = 1U << (24 - prefix_len);
+		for (i = 0; i < num_leafs; i++) {
+			/*Longer prefix exists*/
+			if (p->P24[idx + i] > prefix_len)
+				continue;
+			p->N24[idx + i] = netdev_index;
+			p->P24[idx + i] = prefix_len;
+		}
+		goto finish;
+	}
+        
+	if (p->C24[idx] == 0) {
+		/*Step 1*/
+		chunk_id = calc_ckid24_from_C16(p->C24, N24_SIZE, idx);
+		if (!chunk_id)
+			goto error;
+		/*Step 2*/
+                err = chunk_insert(p->N32, p->P32, p->C32, &p->cnk32_count, chunk_id, CNK_8);
+		if (err) {
+                        pr_err("Could not insert chunk to level 32");
+			goto error;
+                }
+		/*Step 3*/
+		err = update_C16(p->C24, N24_SIZE, idx, chunk_id);
+		if (err)
+			goto error;
+	}
+        
+        idx = (p->C24[idx] - 1) * CNK_8 + ((key >> 32) & 0XFF);
+        
+	if (prefix_len <= 32) {
+		/*All the leafs in level 1~16 will be stored in level 16.*/
+		num_leafs = 1U << (32 - prefix_len);
+		for (i = 0; i < num_leafs; i++) {
+			/*Longer prefix exists*/
+			if (p->P32[idx + i] > prefix_len)
+				continue;
+			p->N32[idx + i] = netdev_index;
+			p->P32[idx + i] = prefix_len;
+		}
+		goto finish;
+	}
+
+	if (p->C32[idx] == 0) {
+		/*Step 1*/
+		chunk_id = calc_ckid24_from_C16(p->C32, N32_SIZE, idx);
+		if (!chunk_id)
+			goto error;
+		/*Step 2*/
+                err = chunk_insert(p->N40, p->P40, p->C40, &p->cnk40_count, chunk_id, CNK_8);
+		if (err) {
+                        pr_err("Could not insert chunk to level 32");
+			goto error;
+                }
+		/*Step 3*/
+		err = update_C16(p->C32, N32_SIZE, idx, chunk_id);
+		if (err)
+			goto error;
+	}
+
+        idx = (p->C32[idx] - 1) * CNK_8 + ((key >> 24) & 0XFF);
+        
+	if (prefix_len <= 40) {
+		/*All the leafs in level 1~16 will be stored in level 16.*/
+		num_leafs = 1U << (40 - prefix_len);
+		for (i = 0; i < num_leafs; i++) {
+			/*Longer prefix exists*/
+			if (p->P40[idx + i] > prefix_len)
+				continue;
+			p->N40[idx + i] = netdev_index;
+			p->P40[idx + i] = prefix_len;
+		}
+		goto finish;
+	}
+
+	if (p->C40[idx] == 0) {
+		/*Step 1*/
+		chunk_id = calc_ckid24_from_C16(p->C40, N40_N48_SIZE, idx);
+		if (!chunk_id)
+			goto error;
+		/*Step 2*/
+                err = chunk_insert(p->N48, p->P48, p->C48, &p->cnk48_count, chunk_id, CNK_8);
+		if (err) {
+                        pr_err("Could not insert chunk to level 32");
+			goto error;
+                }
+		/*Step 3*/
+		err = update_C16(p->C40, N40_N48_SIZE, idx, chunk_id);
+		if (err)
+			goto error;
+	}
+        
+        idx = (p->C40[idx] - 1) * CNK_8 + ((key >> 16) & 0XFF);
+        
+	if (prefix_len <= 48) {
+		/*All the leafs in level 1~16 will be stored in level 16.*/
+		num_leafs = 1U << (48 - prefix_len);
+		for (i = 0; i < num_leafs; i++) {
+			/*Longer prefix exists*/
+			if (p->P48[idx + i] > prefix_len)
+				continue;
+			p->N48[idx + i] = netdev_index;
+			p->P48[idx + i] = prefix_len;
+		}
+		goto finish;
+	}
+        
+	if (p->C48[idx] == 0) {
+		/*Step 1*/
+		chunk_id = calc_ckid24_from_C16(p->C48, N40_N48_SIZE, idx);
+		if (!chunk_id)
+			goto error;
+		/*Step 2*/
+                err = chunk_insert(p->N56, p->P56, p->C56, &p->cnk56_count, chunk_id, CNK_8);
+		if (err) {
+                        pr_err("Could not insert chunk to level 32");
+			goto error;
+                }
+		/*Step 3*/
+		err = update_C16(p->C48, N40_N48_SIZE, idx, chunk_id);
+		if (err)
+			goto error;
+	}
+        idx = (p->C48[idx] - 1) * CNK_8 + ((key >> 8) & 0XFF);       
+
+	if (prefix_len <= 56) {
+		/*All the leafs in level 1~16 will be stored in level 16.*/
+		num_leafs = 1U << (56 - prefix_len);
+		for (i = 0; i < num_leafs; i++) {
+			/*Longer prefix exists*/
+			if (p->P56[idx + i] > prefix_len)
+				continue;
+			p->N56[idx + i] = netdev_index;
+			p->P56[idx + i] = prefix_len;
+		}
+		goto finish;
+	}
+
+	if (p->C56[idx] == 0) {
+		/*Step 1*/
+		chunk_id = calc_ckid24_from_C16(p->C56, N64_SIZE, idx);
+		if (!chunk_id)
+			goto error;
+		/*Step 2*/
+                err = chunk_insert(p->N64, p->P64, NULL, &p->cnk64_count, chunk_id, CNK_8);
+		if (err) {
+                        pr_err("Could not insert chunk to level 32");
+			goto error;
+                }
+		/*Step 3*/
+		err = update_C16(p->C56, N64_SIZE, idx, chunk_id);
+		if (err)
+			goto error;
+	}
+        
+        idx = (p->C56[idx] - 1) * CNK_8 + (key & 0XFF);
+        
+	if (prefix_len <= 64) {
+		/*All the leafs in level 1~16 will be stored in level 16.*/
+		num_leafs = 1U << (64 - prefix_len);
+		for (i = 0; i < num_leafs; i++) {
+			/*Longer prefix exists*/
+			if (p->P64[idx + i] > prefix_len)
+				continue;
+			p->N64[idx + i] = netdev_index;
+			p->P64[idx + i] = prefix_len;
+		}
+		goto finish;
+	}
+       
+error:
+	pr_err("Something went wrong in route insertion");
+finish:
+	spin_unlock(&p->lock);
+	return err;
+}
+
+int ppc_lookup(const struct PPC *p, const u64 key, struct net_device **dev)
+{
+	u8 *n16, *n;
+	u16 *c16;
+        u16 *c;
+        u32 off;
+	u8 netdev_index = p->def_nh;
+	u16 n16_idx;/*Index to N16 and C16*/
+        u32 idx, idx_sail;/*Index to B/C*/
+	u32 n_idx;/*Index to N*/
+	u32 c_idx;/*Index to C*/
+	u32 ck_idx;/*Index to CK*/
+	u64 ck_off;/*Index to CK*/
+
+	rcu_read_lock();
+
+	/*extract 16 bits from MSB*/
+	n16_idx = key >> 48;
+	n16 = rcu_dereference(p->N16);
+	if (unlikely(!n16))
+		goto finish;
+
+        /*Find corresponding next-hop in level 16*/
+	if (likely(n16[n16_idx] != 0))
+		netdev_index = n16[n16_idx];
+
+	/*Check if there is a longer prefix; if yes, extract bit 17~32
+	 *  and calculate index to N32
+	 */
+	c16 = rcu_dereference(p->C16);
+	if (likely(c16[n16_idx] != 0)) {
+		idx = (c16[n16_idx] - 1) * CNK_8 + ((key >> 40) & 0XFF);
+	} else {
+		goto finish;
+	}
+        
+        n = rcu_dereference(p->N24);
+	if (likely(n[idx] != 0))
+		netdev_index = n[idx];
+        
+	c = rcu_dereference(p->C24);
+	if (likely(c[idx] != 0)) {
+		idx = (c[idx] - 1) * CNK_8 + ((key >> 32) & 0XFF);
+	} else {
+		goto finish;
+	}        
+
+        n = rcu_dereference(p->N32);
+	if (likely(n[idx] != 0))
+		netdev_index = n[idx];
+
+	c = rcu_dereference(p->C32);
+	if (likely(c[idx] != 0)) {
+		idx = (c[idx] - 1) * CNK_8 + ((key >> 24) & 0XFF);
+	} else {
+		goto finish;
+	}
+        
+        n = rcu_dereference(p->N40);
+	if (likely(n[idx] != 0))
+		netdev_index = n[idx];
+
+	c = rcu_dereference(p->C40);
+	if (likely(c[idx] != 0)) {
+		idx = (c[idx] - 1) * CNK_8 + ((key >> 16) & 0XFF);
+	} else {
+		goto finish;
+	}
+
+        n = rcu_dereference(p->N48);
+	if (likely(n[idx] != 0))
+		netdev_index = n[idx];
+
+	c = rcu_dereference(p->C48);
+	if (likely(c[idx] != 0)) {
+		idx = (c[idx] - 1) * CNK_8 + ((key >> 8) & 0XFF);
+	} else {
+		goto finish;
+	}
+
+        n = rcu_dereference(p->N56);
+	if (likely(n[idx] != 0))
+		netdev_index = n[idx];
+
+	c = rcu_dereference(p->C56);
+	if (likely(c[idx] != 0)) {
+		idx = (c[idx] - 1) * CNK_8 + (key & 0XFF);
+	} else {
+		goto finish;
+	}
+
+        n = rcu_dereference(p->N64);
+	if (likely(n[idx] != 0))
+		netdev_index = n[idx];
+        
+finish:
+	*dev = p->netdevs[netdev_index];
+	rcu_read_unlock();
+	return 0;
+}
diff --git a/net/ipv6/route.c b/net/ipv6/route.c
index 826b14d..47ca472 100644
--- a/net/ipv6/route.c
+++ b/net/ipv6/route.c
@@ -678,18 +678,20 @@ static struct fib6_info *find_match(struct fib6_info *rt, int oif, int strict,
 		match_do_rr = true;
 		m = 0; /* lowest valid score */
 	} else if (m == RT6_NUD_FAIL_HARD) {
-		goto out;
+//Tamim, undo
+//		goto out;
 	}
 
 	if (strict & RT6_LOOKUP_F_REACHABLE)
 		rt6_probe(rt);
 
 	/* note that m can be RT6_NUD_FAIL_PROBE at this point */
-	if (m > *mpri) {
+//Tamim, undo
+//	if (m > *mpri) {
 		*do_rr = match_do_rr;
 		*mpri = m;
 		match = rt;
-	}
+//	}
 out:
 	return match;
 }
@@ -1146,6 +1148,32 @@ struct rt6_info *rt6_lookup(struct net *net, const struct in6_addr *daddr,
 }
 EXPORT_SYMBOL(rt6_lookup);
 
+#if IS_ENABLED(CONFIG_FIB_SAIL_XDP)
+static void get_addr (struct in6_addr *addr, u64 key)
+{
+    __be16 *addr_ipv6 = addr->in6_u.u6_addr16;
+    addr_ipv6[0] = htons(key >> 48);
+    addr_ipv6[1] = htons((key >> 32) & 0XFFFF);
+    addr_ipv6[2] = htons((key >> 16) & 0XFFFF);
+    addr_ipv6[3] = htons(key & 0XFFFF);
+    addr_ipv6[4] = 0;
+    addr_ipv6[5] = 0;
+    addr_ipv6[6] = 0;
+    addr_ipv6[7] = 0;
+}
+
+static u64 get_key (struct in6_addr addr)
+{
+    u64 key;
+    __be16 *addr_ipv6 = addr.in6_u.u6_addr16;
+    key = ((__force u64)(ntohs(addr_ipv6[0])) << 48) |
+          ((__force u64)(ntohs(addr_ipv6[1])) << 32) |
+          ((__force u64)(ntohs(addr_ipv6[2])) << 16) |
+          (__force u64)(ntohs(addr_ipv6[3]));
+    return key;
+}
+#endif
+
 /* ip6_ins_rt is called with FREE table->tb6_lock.
  * It takes new route entry, the addition fails by any reason the
  * route is released.
@@ -1157,7 +1185,13 @@ static int __ip6_ins_rt(struct fib6_info *rt, struct nl_info *info,
 {
 	int err;
 	struct fib6_table *table;
+#if IS_ENABLED(CONFIG_FIB_SAIL_XDP)
 
+        if (rt->fib6_dst.plen <= 64) {
+//            pr_err("Inserting %pI6c %d => %s", &rt->fib6_dst.addr, rt->fib6_dst.plen, rt->fib6_nh.nh_dev->name);
+            ppc_insert(&rt->fib6_table->ppc, get_key(rt->fib6_dst.addr), rt->fib6_dst.plen, rt->fib6_nh.nh_dev);            
+        }
+#endif
 	table = rt->fib6_table;
 	spin_lock_bh(&table->tb6_lock);
 	err = fib6_add(&table->tb6_root, rt, info, extack);
@@ -1854,6 +1888,14 @@ struct fib6_info *fib6_table_lookup(struct net *net, struct fib6_table *table,
 	return f6i;
 }
 
+#if IS_ENABLED(CONFIG_FIB_SAIL_XDP)
+static u64 global_key = 0X2001020000000000;
+#define NUM_TEST_CASES 1000
+static u64 arr [NUM_TEST_CASES];
+static u64 increment = 0X100000000;
+static spinlock_t lock_gen;
+#endif
+
 struct rt6_info *ip6_pol_route(struct net *net, struct fib6_table *table,
 			       int oif, struct flowi6 *fl6,
 			       const struct sk_buff *skb, int flags)
@@ -1861,6 +1903,10 @@ struct rt6_info *ip6_pol_route(struct net *net, struct fib6_table *table,
 	struct fib6_info *f6i;
 	struct rt6_info *rt;
 	int strict = 0;
+#if IS_ENABLED(CONFIG_FIB_SAIL_XDP)
+        struct net_device *dev;
+        int i;
+#endif
 
 	strict |= flags & RT6_LOOKUP_F_IFACE;
 	strict |= flags & RT6_LOOKUP_F_IGNORE_LINKSTATE;
@@ -1869,6 +1915,46 @@ struct rt6_info *ip6_pol_route(struct net *net, struct fib6_table *table,
 
 	rcu_read_lock();
 
+#if IS_ENABLED(CONFIG_FIB_SAIL_XDP)
+        
+//        spin_lock(&lock_gen);
+        
+//        for (i = 0; i < NUM_TEST_CASES; i++) {
+//            arr[i] = global_key;
+//            if ( global_key >= 0X2001800000000000) {
+//                global_key = 0X2001020000000000;
+//                if (increment == 0X100000000)
+//                    increment = 0X10000;
+//                else if (increment == 0X10000)
+//                    increment = 0X1000;
+//                else 
+//                    increment = 0X100000000;
+//            } else { 
+//                global_key += increment;
+//            }
+//        }                
+
+//        for (i = 0; i < NUM_TEST_CASES; i++) {
+//            get_addr(&fl6->daddr, arr[i]);
+//            pr_err("arr[%d] = %pI6c", i, &fl6->daddr);
+//        }
+        
+//        for (i = 0; i < NUM_TEST_CASES; i++) {
+//            ppc_lookup(&net->ipv6.fib6_main_tbl->ppc, arr[i], &dev);
+//            get_addr(&fl6->daddr, arr[i]);            
+//            f6i = fib6_table_lookup(net, net->ipv6.fib6_main_tbl, oif, fl6, strict);
+//            if (f6i->fib6_nh.nh_dev->name && dev->name &&
+//                    strcmp(f6i->fib6_nh.nh_dev->name, dev->name) &&
+//                    strcmp(f6i->fib6_nh.nh_dev->name, "wlo1") &&
+//                    strcmp(f6i->fib6_nh.nh_dev->name, "lo")) {
+//                pr_err("%d.Trie: %pI6c => %s", i, &fl6->daddr, f6i->fib6_nh.nh_dev->name);
+//                pr_err("%d.SAIL: %pI6c => %s", i, &fl6->daddr, dev->name);
+//            }
+//        }
+        
+//        spin_unlock(&lock_gen);
+
+#endif
 	f6i = fib6_table_lookup(net, table, oif, fl6, strict);
 	if (f6i->fib6_nsiblings)
 		f6i = fib6_multipath_select(net, f6i, fl6, oif, skb, strict);
@@ -3179,7 +3265,14 @@ static int __ip6_del_rt(struct fib6_info *rt, struct nl_info *info)
 	struct net *net = info->nl_net;
 	struct fib6_table *table;
 	int err;
-
+#if IS_ENABLED(CONFIG_FIB_SAIL_XDP)
+        if (rt->fib6_dst.plen <= 64) {
+//            pr_err("Deleting %pI6c/%d", &rt->fib6_dst.addr, rt->fib6_dst.plen);
+//            sail_delete(&rt->fib6_table->sail, get_key(rt->fib6_dst.addr), rt->fib6_dst.plen);
+        }
+#endif
+	table = rt->fib6_table;
+        
 	if (rt == net->ipv6.fib6_null_entry) {
 		err = -ENOENT;
 		goto out;
